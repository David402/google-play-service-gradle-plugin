
buildscript {
    dependencies {
        repositories {
            mavenCentral()
        }

        classpath 'com.github.townsfolk:gradle-release:1.2'
    }
}

apply plugin: 'groovy'
apply plugin: 'maven'
apply plugin: 'signing'
apply plugin: 'release'

dependencies {
    compile gradleApi()
    compile localGroovy()

    testCompile 'junit:junit:4.11'
}

//group = 'com.davidsw.googleplayservice.gradle'
// looks odd, but pulls the version from the property defined in gradle.properties
//version = project.VERSION_NAME
//group = GROUP
//artifactId = project.artifactId

ext.archivesBaseName = 'playservice-plugin'
ext.isSnapshot = VERSION_NAME.endsWith("-SNAPSHOT")

configurations {
    includeInJar
}

install {
    repositories.mavenInstaller {
        pom.version = VERSION_NAME
        pom.artifactId = POM_ARTIFACT_ID
    }
}


jar {

}

task sourceJar(type: Jar) {
    description = 'An archive of the source code for Maven Central'
    classifier = 'sources'
    from sourceSets.main.groovy
}

task groovydocJar(type: Jar) {
    description = 'An archive of the GroovyDocs for Maven Central'
    classifier = 'javadoc'
    from groovydoc
}

artifacts {
    archives groovydocJar, sourceJar
}

signing {
    required { isReleaseVersion() && gradle.taskGraph.hasTask("uploadArchives") }
    //println "isReleaseBuild: " + isReleaseBuild()
    //required = !isReleaseBuild() && gradle.taskGraph.hasTask(":uploadArchives")
    //println "required=${required}"
    //secretKeyRingFile="/Users/davidliu/.gnupg/secring.gpg"
    sign configurations.archives
}

// Only *require* signing if we are uploading a non snapshot version
gradle.taskGraph.whenReady { taskGraph ->
    tasks.withType(org.gradle.plugins.signing.Sign).all {
        required = isReleaseBuild() && taskGraph.hasTask(":uploadArchives")
    }
}

gradle.taskGraph.whenReady { taskGraph ->
    if (taskGraph.allTasks.any { it instanceof Sign }) {
        // Use Java 6's console to read from the console (no good for
        // a CI environment)
        Console console = System.console()
        console.printf "\n\nWe have to sign some things in this build." +
                       "\n\nPlease enter your signing details.\n\n"

        def id = console.readLine("PGP Key Id: ")
        def file = console.readLine("PGP Secret Key Ring File (absolute path): ")
        def password = console.readPassword("PGP Private Key Password: ")

        allprojects { ext."signing.keyId" = id }
        allprojects { ext."signing.secretKeyRingFile" = file }
        allprojects { ext."signing.password" = password }

        console.printf "\nThanks.\n\n"
    }
}


install.repositories.mavenInstaller {
    pom.project(pomConfiguration)
    //signing.secretKeyRingFile="/Users/davidliu/.gnupg/secring.gpg"
    //println "signing.secretKeyRingFile=" + signing.secretKeyRingFile
    //if (signing.signatory) {
    //    beforeDeployment { signing.signPom(it) }
    //}
}

uploadArchives {
    repositories.mavenDeployer {
    	beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }

        pom.artifactId = POM_ARTIFACT_ID

        //if (signing.signatory) {
        //    beforeDeployment { signPom(it) }
        //}
        name = 'mavenCentralReleaseDeployer'
        repository(url: 'https://oss.sonatype.org/service/local/staging/deploy/maven2/') {
        		Console console = System.console()
        		console.printf "\n\nWe have to sign some things in this build." +
                       "\n\nPlease enter your signing details.\n\n"

        		def sonatypeUsername = console.readLine("Sonatype Username: ")
        		def sonatypePassword = console.readPassword("Sonatype Password: ")

            authentication(userName: sonatypeUsername, password: sonatypePassword)
            releases(updatePolicy: 'always')
            snapshots(updatePolicy: 'always')
        }
        pom.project(pomConfiguration)
    }
}

release {
    createReleaseTag.dependsOn uploadArchives
}

/**v
 * Create POM config and return for use by other tasks.
 */
def getPomConfiguration() {
    return {
        name 'Gradle Google Play Service Plugin'
        packaging 'jar'
        description 'A Gradle plugin for include play service lib and do customization.'
        url 'https://github.com/David402/google-play-service-gradle-plugin'
        licenses {
            license {
                name 'The Apache Software License, Version 2.0'
                url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                distribution 'repo'
            }
        }
        developers {
            developer {
                id 'davidsw'
                name 'David Liu'
                email 'shaowei.liu@gmail.com'
            }
        }
        scm {
            connection 'scm:https://github.com/David402/google-play-service-gradle-plugin'
            developerConnection 'scm:git@git@github.com:David402/google-play-service-gradle-plugin.git'
            url 'scm:https://github.com/David402/google-play-service-gradle-plugin'
        }
    }
}

def isReleaseBuild() {
    return VERSION_NAME.contains("SNAPSHOT") == false
}