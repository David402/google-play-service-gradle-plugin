
buildscript {
    dependencies {
        repositories {
            mavenCentral()
        }

        classpath 'com.github.townsfolk:gradle-release:1.2'
    }
}

apply plugin: 'groovy'
apply plugin: 'maven'
apply plugin: 'signing'
apply plugin: 'release'

dependencies {
    compile gradleApi()
    compile localGroovy()
}

configurations {
    includeInJar
}

install.repositories.mavenInstaller {
    pom.groupId = GROUP
    pom.version = version
    pom.artifactId = POM_ARTIFACT_ID
    pom.project(pomConfiguration)
}


jar {

}

task sourceJar(type: Jar) {
    description = 'An archive of the source code for Maven Central'
    classifier = 'sources'
    from sourceSets.main.groovy
}

task groovydocJar(type: Jar) {
    description = 'An archive of the GroovyDocs for Maven Central'
    classifier = 'javadoc'
    from groovydoc
}

artifacts {
    archives groovydocJar, sourceJar
}

signing {
    required { isReleaseBuild() && gradle.taskGraph.hasTask("uploadArchives") }
    sign configurations.archives
}

gradle.taskGraph.whenReady { taskGraph ->
    if (taskGraph.allTasks.any { it instanceof Sign }) {
        // Use Java 6's console to read from the console (no good for
        // a CI environment)
        Console console = System.console()
        def env = System.getenv()
        def id = env['SIGNING_PGP_KEYID']
        def file = env['SIGNING_PGP_SECRET_KEY_RING_FILE']
        def password = env['SIGNING_PGP_PASSWORD']
        allprojects { ext."signing.keyId" = id ?: console.readLine("PGP Key Id: ") }
        allprojects { ext."signing.secretKeyRingFile" = file ?: console.readLine("PGP Secret Key Ring File (absolute path): ") }
        allprojects { ext."signing.password" = password ?: console.readPassword("PGP Private Key Password: ")}
    }
}

afterEvaluate { project ->
    uploadArchives {
        repositories.mavenDeployer {
            beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }

            pom.groupId = GROUP
            pom.artifactId = POM_ARTIFACT_ID
            pom.version = version

            name = 'mavenCentralReleaseDeployer'
            repository(url: 'https://oss.sonatype.org/service/local/staging/deploy/maven2/') {
                authentication(userName: getRepositoryUsername(), password: getRepositoryPassword())
                releases(updatePolicy: 'always')
                snapshots(updatePolicy: 'always')
            }
            snapshotRepository(url: 'https://oss.sonatype.org/content/repositories/snapshots/') {
                authentication(userName: getRepositoryUsername(), password: getRepositoryPassword())
            }
            pom.project(pomConfiguration)
        }
    }
}

release {
    createReleaseTag.dependsOn uploadArchives
}

/**v
 * Create POM config and return for use by other tasks.
 */
def getPomConfiguration() {
    return {
        name POM_NAME
        packaging POM_PACKAGING
        description POM_DESCRIPTION
        url POM_URL
        licenses {
            license {
                name POM_LICENCE_NAME
                url POM_LICENCE_URL
                distribution POM_LICENCE_DIST
            }
        }
        developers {
            developer {
                id POM_DEVELOPER_ID
                name POM_DEVELOPER_NAME
                email POM_DEVELOPER_EMAIL
            }
        }
        scm {
            connection POM_SCM_CONNECTION
            developerConnection POM_SCM_DEV_CONNECTION
            url POM_SCM_URL
        }
    }
}

def isReleaseBuild() {
    return version.contains("SNAPSHOT") == false
}


def getRepositoryUsername() {
    def sonatypeUsername = System.getenv("SONATYPE_USERNAME")
    return sonatypeUsername ?: System.console().readLine("Sonatype Username: ")
}

def getRepositoryPassword() {
    def sonatypePassword = System.getenv("SONATYPE_PASSWORD")
    return sonatypePassword ?: System.console().readLine("Sonatype Password: ")
}